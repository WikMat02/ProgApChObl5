FROM scratch AS build-stage

ADD alpine-minirootfs-3.21.3-aarch64.tar /

# Dodajemy wymagane pakiety
RUN apk add --no-cache nodejs npm

# Ustawiamy katalog roboczy
WORKDIR /app

# Kopiujemy kod aplikacji
COPY package.json package-lock.json /app/
RUN npm install

COPY server.js /app/server.js

# Definiujemy zmienną ARG dla wersji aplikacji
ARG VERSION="unknown"

# Ustawiamy zmienną środowiskową dla wersji aplikacji
ENV APP_VERSION=$VERSION

# Uruchamiamy aplikację
#CMD ["node", "server.js"]


# Etap 2: Nginx jako serwer HTTP
FROM nginx:alpine

# dodajemy pakiety
RUN apk add --no-cache nodejs npm

# Definiujemy zmienną ARG dla wersji aplikacji
ARG VERSION="unknown"
# Ustawiamy zmienną środowiskową dla wersji aplikacji
ENV APP_VERSION=$VERSION

# Kopiujemy aplikację z etapu 1 (build-stage)
COPY --from=build-stage /app /app

# Kopiujemy plik konfiguracji Nginx, aby ustawić stronę startową
COPY nginx.conf /etc/nginx/nginx.conf

# Uruchamiamy oba procesy w jednym kontenerze
CMD (cd /app && node server.js &) && nginx -g "daemon off;"

EXPOSE 80

# Definiujemy HEALTHCHECK - sprawdzanie stanu aplikacji
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
  CMD curl --fail http://localhost:8080/ || exit 1




